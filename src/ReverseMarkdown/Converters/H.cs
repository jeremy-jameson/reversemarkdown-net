using System;
using System.Linq;
using HtmlAgilityPack;

namespace ReverseMarkdown.Converters
{
    public class H : BlockElementConverter
    {
        public H(Converter converter) : base(converter)
        {
            var elements = new [] { "h1", "h2", "h3", "h4", "h5", "h6" };
            foreach (var element in elements)
            {
                Converter.Register(element, this);
            }
        }

        /// <remarks>
        /// Typically, element converters should override
        /// <see cref="GetMarkdownContent"/> -- not <c>Convert</c>.
        /// However, in the case of headings, there is some special handling
        /// for the scenario where a heading resides in a table -- where
        /// the Markdown conversion should omit the "prefix" (e.g. "# ") and
        /// just use the content of the heading (i.e. the Markdown generated by
        /// the child nodes.
        /// </remarks>
        public override string Convert(HtmlNode node)
        {
            // Headings inside tables are not supported as markdown, so just ignore the heading and convert children
            if (node.Ancestors("table").Count() > 0)
            {
                return GetMarkdownContent(node);
            }

            return base.Convert(node);
        }

        public override string GetMarkdownPrefix(HtmlNode node)
        {
            var prefix = new string('#', System.Convert.ToInt32(node.Name.Substring(1)));

            return $"{Environment.NewLine}{prefix} ";
        }
    }
}
